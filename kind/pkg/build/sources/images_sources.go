// Code generated by go-bindata.
// sources:
// ../../../images/base/Dockerfile
// ../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7d\x6f\xdb\x46\xd2\xff\x5f\x9f\x62\x40\x19\x89\xdd\x8a\xa4\x63\x27\xa9\xeb\xc2\x78\x1e\xc5\x56\x5c\x21\x89\x14\x48\x4a\x83\xa0\x4f\x61\x2c\xc9\x11\xb9\x8f\x96\xbb\xbc\x7d\x91\xa2\xe4\xdc\xcf\x7e\x98\xe5\x8b\x24\xc7\xbd\xeb\xa1\x77\x41\x00\xdb\xfb\x32\x33\x3b\x2f\xbf\xf9\x0d\xfb\x70\xad\xaa\xad\xe6\x79\x61\xe1\xec\xf4\xd9\x05\x2c\x0a\x84\x37\x2e\x41\x2d\xd1\xa2\x81\xa1\xb3\x85\xd2\x26\xea\xf5\x7b\x7d\x78\xcb\x53\x94\x06\x33\x70\x32\x43\x0d\xb6\x40\x18\x56\x2c\x2d\xb0\xdd\x19\xc0\x2f\xa8\x0d\x57\x12\xce\xa2\x53\x38\xa6\x03\x41\xb3\x15\x9c\xfc\xd4\xeb\xc3\x56\x39\x28\xd9\x16\xa4\xb2\xe0\x0c\x82\x2d\xb8\x81\x25\x17\x08\xf8\x39\xc5\xca\x02\x97\x90\xaa\xb2\x12\x9c\xc9\x14\x61\xc3\x6d\xe1\xd5\x34\x42\xa2\x5e\x1f\x3e\x35\x22\x54\x62\x19\x97\xc0\x20\x55\xd5\x16\xd4\x72\xff\x1c\x30\xeb\x0d\xa6\x7f\x85\xb5\xd5\x65\x1c\x6f\x36\x9b\x88\x79\x63\x23\xa5\xf3\x58\xd4\x07\x4d\xfc\x76\x7c\x3d\x9a\xcc\x47\xe1\x59\x74\xea\xaf\x7c\x90\x02\x8d\x01\x8d\x7f\x73\x5c\x63\x06\xc9\x16\x58\x55\x09\x9e\xb2\x44\x20\x08\xb6\x01\xa5\x81\xe5\x1a\x31\x03\xab\xc8\xde\x8d\xe6\x96\xcb\x7c\x00\x46\x2d\xed\x86\x69\xec\xf5\x21\xe3\xc6\x6a\x9e\x38\x7b\xe0\xac\xd6\x3a\x6e\x0e\x0e\x28\x09\x4c\x42\x30\x9c\xc3\x78\x1e\xc0\xab\xe1\x7c\x3c\x1f\xf4\xfa\xf0\x71\xbc\xf8\x79\xfa\x61\x01\x1f\x87\xb3\xd9\x70\xb2\x18\x8f\xe6\x30\x9d\xc1\xf5\x74\x72\x33\x5e\x8c\xa7\x93\x39\x4c\x5f\xc3\x70\xf2\x09\xde\x8c\x27\x37\x03\x40\x6e\x0b\xd4\x80\x9f\x2b\x4d\xf6\x2b\x0d\x9c\xdc\x88\x19\xf9\x6c\x8e\x78\x60\xc0\x52\xd5\x06\x99\x0a\x53\xbe\xe4\x29\x08\x26\x73\xc7\x72\x84\x5c\xad\x51\x4b\x2e\x73\xa8\x50\x97\xdc\x50\x30\x0d\x30\x99\xf5\xfa\x20\x78\xc9\x2d\xb3\x7e\xe5\x9b\x47\x45\xbd\x5e\x1f\x56\x5c\x66\x90\x0a\x67\x2c\x6a\x48\x18\x3d\xb5\x64\x39\x0e\x20\x71\x5c\x58\x7a\xe8\x2e\xb5\x9e\x1a\xc8\x30\xe1\x4c\x86\x74\xb0\xd7\x87\x4d\xc1\xd3\x82\x7c\x93\x30\xc3\x53\x26\xc4\x16\x18\xac\x51\x6f\x81\x5c\x55\x55\x98\x41\xa6\x36\xb2\xb9\x55\x4b\x86\xe3\xdf\x9f\x9f\xbf\x7b\x75\xd2\xeb\x83\x2d\x98\x05\x53\xf0\xca\xd4\x69\xc3\xc0\x94\x4c\x08\x70\x96\x0b\x6e\xb7\xf0\x34\x15\xc8\x64\xc8\xa5\xb1\x4c\x88\xa7\x3b\x75\x24\x2b\x43\x26\x20\xd3\xaa\xa2\x80\x2e\x95\xee\xf5\x81\x55\x36\xcc\xd1\x82\xab\x32\x66\x11\x9e\x3c\xe9\x56\x1a\x11\x70\xf4\xbf\xd0\xeb\x83\x41\xf4\x39\x66\x2e\xe3\x38\xe7\xb6\x70\x49\x94\xaa\x32\x5e\x75\x0f\xdd\xff\xd5\x6a\xc4\xb8\x64\xe4\x9f\x98\x7c\x92\xc5\x07\x3e\xe8\xf5\x61\xa1\xea\xa2\xd8\x20\xb0\x2c\x03\xb3\x35\x16\xcb\x6c\x00\xd7\x93\xf1\x80\xe2\x00\xca\xc7\xd9\x2a\x25\x0c\x48\xc4\xac\xce\x43\xed\x6a\xdf\xb2\xac\xf4\x62\x5e\x2b\xdd\xde\x85\xef\x21\x53\xe9\x0a\x35\xa4\x4a\x2e\x79\xee\xb4\x8f\x21\xd5\x5f\x06\x09\x0a\xb5\x19\xf8\x47\x50\x30\x97\x4a\x08\xb5\xa1\xf0\x6b\x5c\xa2\x46\x99\xa2\xb9\xec\xf5\xbb\x07\x52\x15\x2d\x29\xf7\xd1\xac\xac\xaa\x7c\x29\x6d\xf8\x8a\xc7\xf3\x26\xf7\xe3\x46\x69\x7c\xad\x24\xd5\x27\xea\xb1\xb4\xa8\x97\x2c\xc5\x78\x4f\x4e\x86\x6b\x14\xaa\x42\x6d\x22\x8d\x59\xc1\xac\xf7\x59\x22\x54\x1e\x9f\x9d\x3e\x7b\x1e\x9f\xbe\xa0\xff\xda\x49\x4a\xc5\xb0\x91\x19\x52\x5c\xb9\x0c\xeb\xd7\x84\x69\xab\xe1\xcf\x0b\x7e\x19\x9f\xfe\x18\x3f\x3b\xff\x46\x30\x97\x21\x0b\xa5\x92\x61\xa5\xf9\x9a\x0b\xcc\x31\xdb\x17\x4f\x61\x99\xde\x4c\x8f\x13\x94\xb6\x40\x14\x19\xea\x93\x4b\x2a\x35\xa1\x34\x82\x71\x55\xa5\x34\x41\x40\x13\x1b\xa6\xd3\x02\xcd\x00\xc6\xa3\x76\xaf\x86\xca\xd9\xf5\xcf\xc0\x74\x1e\x35\xe1\x91\x6a\x53\x87\x9a\x1b\x30\x96\x0b\x41\x99\x38\x9c\xdd\x82\x51\x14\xfd\x94\x49\xd0\x48\x20\xc9\xe9\xbe\x56\x2e\x2f\x94\xab\x45\xf9\xd4\xa1\x92\xe1\xd6\xaf\xd1\x7b\xb9\xf1\x26\xd0\x61\xe5\x0f\x75\x0f\x88\x7a\x24\x95\xd4\x5f\x05\xac\xcc\x5e\x3e\x0f\xfc\xc2\xab\xe1\x7c\x74\x37\x7e\x37\xbc\x1d\xdd\xfd\x32\x9a\xcd\xc7\xd3\xc9\x55\x70\x1a\x9d\x47\x67\x0f\xb7\xaf\x82\xd5\x85\x89\xf2\x54\x47\x5c\xed\xe7\x6b\x78\xf4\x95\x84\xde\x5f\x1e\x7d\xfd\x56\xd6\x7d\xd0\x7b\x3d\x9b\xbe\x83\xfd\xbd\x7b\xf2\xe4\x64\xba\x18\x5d\xd6\xce\x28\x9d\xb1\x90\x20\x64\xb8\xe4\x12\x33\x60\xb9\x47\xf4\x25\xa1\x07\x5d\xde\x8f\xab\x4a\x4d\x54\x07\xde\x47\x14\x65\xce\x25\xc6\x5d\x96\xd6\xd5\x84\x3a\xee\x9b\x54\x55\xf8\xed\x8b\x7d\xa5\x5a\xef\xa2\x9b\xd1\xab\xf1\x70\x72\xf7\x7a\x36\x9d\x2c\x46\x93\x9b\x2b\xa9\x24\xa7\x24\x65\xa9\xe5\x6b\x04\x63\x55\x65\xc0\xa8\x12\xa9\xe2\x61\xc3\x3c\x1e\x9a\x41\x17\x2c\x6a\x5e\x04\x10\xa0\x09\x35\x98\xce\x5d\x89\xd2\x0e\x60\x83\x4f\x35\xc2\x31\x4b\x4e\x9c\x21\x3d\x64\x83\x55\x40\x90\xc1\xc0\x62\x59\x29\xcd\xf4\x16\x46\x93\x5f\xea\x97\xd6\x71\xf9\xe7\xd6\xf4\xfa\x70\x8b\x16\x32\xac\x50\x66\x28\x53\x8e\x86\xb2\x91\x72\xa0\x83\x57\x60\x42\x23\xcb\xb6\x50\x30\x73\x09\xc6\x14\x03\x32\x7c\x00\x46\xb2\x2a\xf3\xa7\x6b\xbb\x13\xad\x56\x28\x6b\x10\xe5\xd2\x2a\x2a\xec\x10\x2a\x96\xae\x58\x8e\x04\x26\x29\x1a\x43\x16\x52\x7b\x68\x40\x8e\xde\x51\xbb\xfd\xe1\xe1\x7d\xe4\x31\xa8\xd7\x3c\x45\x03\xc7\x4d\x45\x9d\x3c\x7a\x9a\xe4\x36\x50\x14\x43\xb1\xad\x50\x13\x34\x42\x0c\x3b\x84\xf4\xdd\x5f\x49\x94\xd6\x78\x11\x25\x37\xe9\x4e\xce\x71\x0d\xe6\x1c\x3d\x3e\xfa\xda\x90\xa0\x9c\x06\x7a\x12\x41\x22\x97\xf9\x49\xed\x1f\xe9\x6b\x88\x20\xdf\x55\x70\xac\xb1\x54\x6b\x7a\x8b\x93\x1b\x26\xa9\xe9\xb6\xe0\xd8\x9a\x7e\xf2\xdf\x43\xa7\xd9\x87\x09\x1c\x34\x1f\xf8\xbf\x9e\xa7\x26\xbe\xa3\x58\xcd\xa4\x21\x90\x08\xbd\x7a\x48\x59\x98\xa2\xb6\xd4\x96\x99\x77\x88\xd3\xa2\xa3\x16\x61\xa5\xc9\x2e\xf2\x40\x98\xaa\xb2\x54\x12\x72\xe9\xaa\xfc\x0c\x84\x49\x42\x8d\x02\x29\x2b\x5a\xf1\xdd\x1b\x1b\x0b\xcd\xd6\xac\xbb\x4d\x5e\x59\xa2\x34\x06\x78\xa5\x95\xb3\x78\x06\x68\x0b\xf2\x21\x18\x95\x32\xeb\xfb\x66\x28\xb8\x74\x9f\xa1\x54\x4e\x5a\xc0\xa4\xb9\xe0\x32\x5c\xc3\xaa\x54\x19\x30\xb7\x34\x61\xdd\x8a\x5a\xb1\x09\x33\x05\x68\xb3\x95\x69\xb3\xf4\xe4\x09\x2c\x89\x16\xc4\x82\x27\x5d\x77\xa8\x7f\xd2\x0f\x2e\xb9\x8d\x2c\xd3\x39\xda\x88\x42\x63\x62\x08\x25\x2b\x11\x82\xd6\x6a\x5b\x56\xc4\x10\x4d\x68\xd0\xba\x2a\x6a\x02\x16\x40\x98\xa1\x40\x8b\x3b\x35\xba\x84\x70\xf9\xa8\x9e\xd2\x09\xcb\x43\x67\x50\x1f\xaa\xfa\xee\x9b\xcb\x68\xd3\x87\x97\xbf\xfb\xc3\xc3\x8f\x68\x12\x2a\x65\x22\x5c\x9a\x7f\xa5\xe7\x31\x67\x50\xe2\xd8\x87\x37\xc9\xd9\x7f\xe1\x3a\xb9\x37\xb5\xe2\x4f\x49\xf0\xbc\xeb\xc1\x7d\xc2\xcd\x71\x93\xb5\x75\x66\x0f\x1a\xe6\x44\x35\x6d\x08\x00\x0a\x56\x55\xd8\xc2\xf6\x06\x3b\x7a\xe4\x11\xb4\xe1\xe5\x5d\x05\xb3\x44\x79\x50\x23\xf4\xf2\xcc\xf7\x8f\x00\xbe\x91\x12\xfb\x0c\x8c\xdb\xa2\xc2\xd8\x25\x4e\x5a\x17\xf7\x0d\xda\xd0\x55\xa1\x2d\x30\xd4\x58\x29\xc3\xad\xd2\x5b\x42\x65\x99\x75\x32\x77\xb0\xe2\x3b\x97\x4a\x4d\xec\x73\x28\xe6\xb2\x05\x54\xdb\x2a\x0a\x57\x35\x7b\x8a\xfb\x3b\xe4\x0b\xf7\x90\x8f\x50\xbc\xfe\xf3\xa9\x81\xdb\xf7\xb7\xb0\xc2\xad\xdf\x20\x96\xe6\xa9\x13\x97\x39\xea\x4a\x73\x69\x0f\xd6\x0f\xac\x0b\x5b\x3a\xe9\x01\x9a\x3f\x70\x6c\x03\x57\x5d\x93\x7c\xf6\x43\x74\x7a\x4e\xc8\xad\x96\x4b\x9e\x72\x4f\x89\x1b\x46\x51\x4f\x26\x7b\x83\x5a\xea\xb4\x46\x69\xc5\x76\xd0\xf0\x87\x8a\xcb\x9a\x09\x30\x1b\xed\x61\xdb\x23\x3e\xb1\xcc\xac\x4c\xec\xcb\xf8\x1b\x6f\xd4\x2d\x6a\x7a\xfd\x66\x34\xdb\xb1\x04\x6f\x57\x74\xf6\x7b\x8a\xe1\xe9\xef\x0d\x21\x30\x56\xa3\x4d\x8b\xc0\x87\xa0\xe1\xa8\x5d\xcb\x43\xb9\x1e\xf8\xb6\xf9\xa0\x67\x46\x5d\x4f\xf6\xbd\xd5\x2a\x60\x40\x34\xec\x0b\x6a\x05\x6b\x26\x1c\xa5\x8a\xe1\xc2\xf3\xd0\x86\x17\xd7\xed\x18\x96\x5a\x95\x1e\x3f\x57\xb8\xa5\x46\x16\x7c\xac\x37\x2e\xdb\x45\x50\xce\x56\x8e\x46\x02\xe5\x44\xe6\xb5\x27\x94\x88\x9a\x12\xef\xd8\xd8\x8c\x88\x53\xd3\xcd\xa9\x3d\xeb\x92\x4b\x26\x4e\x6a\xf2\x33\x7c\xbf\xb8\x7b\x33\xfa\x74\x77\x33\x9d\x2c\xee\x3e\x0e\x67\x93\xbb\xe9\xe4\xee\x66\x38\xb9\x1d\xcd\xa6\x1f\xe6\x77\x1f\xe6\x9e\x16\x2d\x99\x30\x18\xd4\xf8\x4e\x28\x1d\x2e\xcd\xfc\x2d\x04\xbb\x94\xde\x48\xa1\x58\xb6\x9f\xd6\x75\x3a\x1f\x1d\x47\x35\xd4\x28\xd3\x82\xf6\x4f\x80\x69\xa1\x20\x38\x1a\xdf\x04\x27\x71\x5e\xe5\x01\xfc\xbd\x7b\x0a\xe5\x52\xb8\x2b\xe1\x76\x79\x2f\xe5\xe0\x74\xf4\xea\xf5\xf5\xcd\xc5\xc5\xee\x54\x4d\x7f\x1a\x8e\x16\x90\x8c\x90\x2e\xee\xf2\xb1\xc3\x6c\x80\x20\xc3\x04\x7e\x25\xe2\x7a\xd5\x5c\xf8\x0d\xfe\xfa\x33\xe0\xe8\x58\x98\xe4\xae\x6d\x4b\x61\x6a\x4e\xc0\xf8\x26\x12\xec\xcc\x3c\xec\x8c\x41\x57\xe9\x57\x47\x5f\x0f\xf3\xee\x3e\xd8\x07\xa3\xeb\xc9\x18\x12\x2e\x99\x26\x32\x60\x15\xc4\xaa\xb2\x71\x2a\x79\x9c\x70\xf9\x38\x5f\xcf\x54\x0a\x9b\x62\x0b\x31\x6c\x68\x54\x2c\x50\xd7\x34\xf1\x7a\x32\xde\x27\xc0\x2f\xa3\xd3\xa0\x5b\x5f\x0c\x67\xaf\x86\x6f\xdf\x5e\x05\xa9\xe4\x61\x25\x5c\xce\xa5\x69\x69\x6f\xb8\x3e\xfa\xba\x77\xf7\x3e\xb2\xf9\x97\xdd\x4d\xcf\x7a\x3f\xcc\xde\x5e\x75\xe9\x60\xac\xd2\x2c\xc7\x28\x57\x2a\x17\xc8\x2a\x6e\x1e\x0c\x8a\xad\x0f\x63\x89\x76\xa3\xf4\xaa\x55\x18\xef\xa4\x7a\x81\xb5\xda\x56\xc1\x7d\xfd\x67\x63\xe9\xfd\x7e\x3a\x52\x36\x86\xa1\x46\xab\xb7\xf0\x02\xc2\xb0\xa9\x88\xd8\x96\x15\xb9\x8a\x0c\x86\x46\x1a\x09\xda\x0b\x8a\x29\xd8\xd9\x8b\x97\xc6\x95\x87\x87\xbb\xfd\x72\x95\x71\x0d\x61\x75\xe0\xf6\xdd\xb6\x65\x1a\xc2\xeb\xc3\xcd\xf0\xf3\x97\xe5\x81\x34\x8a\xa6\x45\x6a\x14\x0d\x4d\xf1\x13\x3c\xf7\x45\xc9\x65\x4b\x14\x8f\xb9\x85\x0d\x0d\x47\x69\x81\xe9\xaa\xfb\x72\xd1\xd1\x2b\xc2\x96\x93\xff\xd8\x84\x4a\xdc\x7c\x27\xba\x83\xff\xd6\x42\xfc\xcc\xad\xa1\xae\x35\x1f\xdf\xce\x16\xef\xc6\x93\xef\xcf\x6b\x5c\x9b\x8f\x6f\x17\xa3\xd9\x3b\x38\xae\x7b\xa3\xc6\x10\x3f\x63\xea\x08\x98\xb9\xdd\x37\x2f\x71\xf9\x17\x2e\x04\xdb\x27\x96\xa6\x50\x9b\xbb\xc4\xe5\x51\x9a\xf3\xff\xe1\xd9\xd5\x33\x9a\x54\x5f\xfc\xd0\x9b\x2f\xa6\xef\xe7\xe3\xdb\xc9\xf0\xed\x9e\x3e\xf2\xda\x46\xb3\xaa\xb3\xc9\x7f\xec\x20\x0e\xec\x3f\xe6\x30\x01\x28\xad\xde\x56\x8a\xd3\x48\x42\x73\x7d\xb5\xca\xeb\xe9\xc8\x3b\xaf\xd8\x9b\x3a\xfd\x57\x99\xba\x19\x37\x1f\x5c\xfc\xce\xff\xd3\x58\x26\xd0\x1a\x70\x86\x00\x1a\x5c\x55\x37\x73\xe2\xb7\xb9\x81\x04\x97\x34\xf7\x92\x9f\xb8\x74\x7e\xee\xf5\xad\xa6\xb1\xa8\xfe\x94\x23\x10\x2a\x8d\x9e\xac\x79\x78\x67\xb6\xb3\x98\x1b\x78\x3f\xbe\x79\xd6\xeb\x77\x06\x6d\x10\x04\xae\x91\xca\xc3\x9b\xb0\x33\xbc\xf9\x98\xd4\xbb\x9e\xbe\xff\x04\xbf\x42\xb0\x7b\x5c\xbc\xfb\x35\x18\x40\x10\x3b\xa3\x6b\xf6\x45\xd9\x16\x07\xf0\x5b\xaf\x0f\x1f\xd1\xd3\x94\x5d\x86\x29\xea\x01\xa4\xbc\x9d\x5c\x28\x97\xd6\x4c\x73\xe5\x9f\xda\x4e\x31\x6d\x43\xa6\xda\x24\x8e\x39\x00\xb4\x69\x74\xd2\x1b\x4d\x16\xb3\x4f\xef\xa7\xe3\xc9\x82\x6c\x79\xa0\xf2\x81\x3d\x86\xd6\x88\x7e\x91\x29\x8f\x23\x12\xc1\x3a\xeb\x8c\x73\xb2\x9e\xdd\xc9\x2c\x8a\xa7\x54\x19\x42\xa2\x94\x75\x15\x08\x95\xf3\xf4\xdf\x4c\xa3\x8b\xd3\x1f\x9f\x9d\x9f\xfd\x01\x16\x52\x17\xf6\x99\xd3\x6a\x7f\x37\xbc\x26\x7b\xfc\xc7\x43\x66\x0c\xcf\x25\x35\xe8\x3d\x95\x7b\xdf\xb6\x0e\x79\x63\x16\x73\x63\x1c\x9a\xf8\xfc\xfc\x87\xe7\x7d\xff\x3b\x8d\x26\x28\x6d\x78\x76\x71\x71\x71\x71\x76\xfe\xe2\xc5\x5f\x94\x73\x7e\xfe\xe3\xd9\x8b\x8b\xe7\x17\xe7\xbd\x7f\x04\x00\x00\xff\xff\xbc\x43\x09\x50\xb0\x16\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile": {imagesBaseDockerfile, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
